package generator

import (
	"bytes"
	"go/format"
	"sort"
	"text/template"

	"github.com/iancoleman/strcase"
)

type SQLParam struct {
	Name  string
	Index int
}

type SQLFile struct {
	Path       string
	Key        string
	Content    string
	Name       string
	Params     map[string]SQLParam
	ReboundSQL string
}

func Go(tinySQLFiles map[string][]SQLFile) string {
	source := bytes.NewBufferString("")

	err := mapTemplate.Execute(source, struct {
		PackageName string
		Roots map[string][]SQLFile
	}{
		PackageName: "sql",
		Roots: tinySQLFiles,
	})

	if err != nil {
		panic(err)
	}

	formattedBytes, err := format.Source(source.Bytes())

	if err != nil {
		panic(err)
	}

	return string(formattedBytes)
}

func sortParams(p map[string]SQLParam) []SQLParam {
	var params []SQLParam

	for _, v := range p {
		params = append(params, v)
	}

	sort.Slice(params, func(i, j int) bool {
		return params[i].Index < params[j].Index
	})

	return params
}

var mapTemplate = template.Must(template.New("").Funcs(template.FuncMap{
	"ToCamel":      strcase.ToCamel,
	"ToLowerCamel": strcase.ToLowerCamel,
	"SortParams":   sortParams,
}).Parse(`// Code generated by go generate;
package {{ .PackageName }}

{{- range $k, $v := .Roots }}
type {{ ToLowerCamel $k }}Sql struct {
	{{- range $v }}
		{{ ToLowerCamel .Name }} string
	{{- end }}
}
{{ end -}}

{{- range $k, $v := .Roots }}
{{- range $v }}
type {{ $k }}{{ .Name }} struct {
	{{- range $paramName, $_ := .Params }}
		{{ ToCamel $paramName }} interface{}
	{{- end }}
}
{{ end }}
{{ end -}}

{{- range $k, $v := .Roots }}
var {{ ToLowerCamel $k }} {{ ToLowerCamel $k }}Sql
{{- end }}

func init() {
	{{- range $k, $v := .Roots }}
	{{ ToLowerCamel $k }} = {{ ToLowerCamel $k }}Sql{
		{{- range $v }}
			{{ ToLowerCamel .Name }}: {{  printf "%q" .ReboundSQL }},
		{{- end }}
	}
	{{ end -}}
}

{{ range $k, $v := .Roots }}
{{- range $v }}
func (p {{ $k }}{{ .Name }}) Build() (string, []interface{}) {
	return {{ ToLowerCamel $k }}.{{ ToLowerCamel .Name }}, []interface{}{
		{{- range $param := SortParams .Params }}
		p.{{ ToCamel $param.Name }},
		{{- end }}
	}
}

func (p {{ $k }}{{ .Name }}) Select(db *sqlx.DB, dest interface{}) error {
	rawSQL, params := p.Build()
	return db.Select(dest, rawSQL, params...)
}
{{ end }}
{{ end -}}
`))
